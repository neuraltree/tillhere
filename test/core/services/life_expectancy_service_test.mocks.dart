// Mocks generated by Mockito 5.4.6 from annotations
// in tillhere/test/core/services/life_expectancy_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tillhere/core/entities/country.dart' as _i6;
import 'package:tillhere/core/entities/life_expectancy.dart' as _i5;
import 'package:tillhere/core/utils/result.dart' as _i2;
import 'package:tillhere/data/datasources/local/life_expectancy_local_datasource.dart'
    as _i3;
import 'package:tillhere/data/datasources/local/locale_detection_service.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LifeExpectancyLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLifeExpectancyLocalDataSource extends _i1.Mock
    implements _i3.LifeExpectancyLocalDataSource {
  MockLifeExpectancyLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.LifeExpectancy>> getLifeExpectancy(
    String? countryCode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getLifeExpectancy, [countryCode]),
            returnValue: _i4.Future<_i2.Result<_i5.LifeExpectancy>>.value(
              _FakeResult_0<_i5.LifeExpectancy>(
                this,
                Invocation.method(#getLifeExpectancy, [countryCode]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.LifeExpectancy>>);

  @override
  _i4.Future<_i2.Result<Map<String, _i5.LifeExpectancy>>>
  getMultipleLifeExpectancies(List<String>? countryCodes) =>
      (super.noSuchMethod(
            Invocation.method(#getMultipleLifeExpectancies, [countryCodes]),
            returnValue:
                _i4.Future<_i2.Result<Map<String, _i5.LifeExpectancy>>>.value(
                  _FakeResult_0<Map<String, _i5.LifeExpectancy>>(
                    this,
                    Invocation.method(#getMultipleLifeExpectancies, [
                      countryCodes,
                    ]),
                  ),
                ),
          )
          as _i4.Future<_i2.Result<Map<String, _i5.LifeExpectancy>>>);

  @override
  _i4.Future<_i2.Result<List<_i6.Country>>> getAllCountries() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCountries, []),
            returnValue: _i4.Future<_i2.Result<List<_i6.Country>>>.value(
              _FakeResult_0<List<_i6.Country>>(
                this,
                Invocation.method(#getAllCountries, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<List<_i6.Country>>>);

  @override
  _i4.Future<_i2.Result<Map<String, dynamic>>> getMetadata() =>
      (super.noSuchMethod(
            Invocation.method(#getMetadata, []),
            returnValue: _i4.Future<_i2.Result<Map<String, dynamic>>>.value(
              _FakeResult_0<Map<String, dynamic>>(
                this,
                Invocation.method(#getMetadata, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<Map<String, dynamic>>>);

  @override
  _i4.Future<bool> hasDataForCountry(String? countryCode) =>
      (super.noSuchMethod(
            Invocation.method(#hasDataForCountry, [countryCode]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LocaleDetectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleDetectionService extends _i1.Mock
    implements _i7.LocaleDetectionService {
  MockLocaleDetectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<String>> detectCountryCode() =>
      (super.noSuchMethod(
            Invocation.method(#detectCountryCode, []),
            returnValue: _i4.Future<_i2.Result<String>>.value(
              _FakeResult_0<String>(
                this,
                Invocation.method(#detectCountryCode, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<String>>);

  @override
  _i4.Future<_i2.Result<_i6.Country>> detectCountry() =>
      (super.noSuchMethod(
            Invocation.method(#detectCountry, []),
            returnValue: _i4.Future<_i2.Result<_i6.Country>>.value(
              _FakeResult_0<_i6.Country>(
                this,
                Invocation.method(#detectCountry, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i6.Country>>);

  @override
  bool isCountrySupported(String? countryCode) =>
      (super.noSuchMethod(
            Invocation.method(#isCountrySupported, [countryCode]),
            returnValue: false,
          )
          as bool);

  @override
  List<String> getSupportedCountryCodes() =>
      (super.noSuchMethod(
            Invocation.method(#getSupportedCountryCodes, []),
            returnValue: <String>[],
          )
          as List<String>);
}
