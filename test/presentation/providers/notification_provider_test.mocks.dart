// Mocks generated by Mockito 5.4.6 from annotations
// in tillhere/test/presentation/providers/notification_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tillhere/core/entities/notification_settings.dart' as _i5;
import 'package:tillhere/core/services/notification_service.dart' as _i6;
import 'package:tillhere/core/utils/result.dart' as _i2;
import 'package:tillhere/data/repositories/notification_repository_impl.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NotificationRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepositoryImpl extends _i1.Mock
    implements _i3.NotificationRepositoryImpl {
  MockNotificationRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i5.NotificationSettings>> createNotificationSetting(
    _i5.NotificationSettings? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createNotificationSetting, [settings]),
            returnValue: _i4.Future<_i2.Result<_i5.NotificationSettings>>.value(
              _FakeResult_0<_i5.NotificationSettings>(
                this,
                Invocation.method(#createNotificationSetting, [settings]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.NotificationSettings>>);

  @override
  _i4.Future<_i2.Result<_i5.NotificationSettings?>> getNotificationSetting(
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationSetting, [id]),
            returnValue:
                _i4.Future<_i2.Result<_i5.NotificationSettings?>>.value(
                  _FakeResult_0<_i5.NotificationSettings?>(
                    this,
                    Invocation.method(#getNotificationSetting, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Result<_i5.NotificationSettings?>>);

  @override
  _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>
  getAllNotificationSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getAllNotificationSettings, []),
            returnValue:
                _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>.value(
                  _FakeResult_0<List<_i5.NotificationSettings>>(
                    this,
                    Invocation.method(#getAllNotificationSettings, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>);

  @override
  _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>
  getEnabledNotificationSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getEnabledNotificationSettings, []),
            returnValue:
                _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>.value(
                  _FakeResult_0<List<_i5.NotificationSettings>>(
                    this,
                    Invocation.method(#getEnabledNotificationSettings, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>);

  @override
  _i4.Future<_i2.Result<_i5.NotificationSettings>> updateNotificationSetting(
    _i5.NotificationSettings? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateNotificationSetting, [settings]),
            returnValue: _i4.Future<_i2.Result<_i5.NotificationSettings>>.value(
              _FakeResult_0<_i5.NotificationSettings>(
                this,
                Invocation.method(#updateNotificationSetting, [settings]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.NotificationSettings>>);

  @override
  _i4.Future<_i2.Result<void>> deleteNotificationSetting(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotificationSetting, [id]),
            returnValue: _i4.Future<_i2.Result<void>>.value(
              _FakeResult_0<void>(
                this,
                Invocation.method(#deleteNotificationSetting, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<void>> deleteAllNotificationSettings() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAllNotificationSettings, []),
            returnValue: _i4.Future<_i2.Result<void>>.value(
              _FakeResult_0<void>(
                this,
                Invocation.method(#deleteAllNotificationSettings, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<_i5.NotificationSettings>> setNotificationEnabled(
    String? id,
    bool? enabled,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setNotificationEnabled, [id, enabled]),
            returnValue: _i4.Future<_i2.Result<_i5.NotificationSettings>>.value(
              _FakeResult_0<_i5.NotificationSettings>(
                this,
                Invocation.method(#setNotificationEnabled, [id, enabled]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<_i5.NotificationSettings>>);

  @override
  _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>
  getNotificationsByScheduleType(_i5.NotificationScheduleType? scheduleType) =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationsByScheduleType, [scheduleType]),
            returnValue:
                _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>.value(
                  _FakeResult_0<List<_i5.NotificationSettings>>(
                    this,
                    Invocation.method(#getNotificationsByScheduleType, [
                      scheduleType,
                    ]),
                  ),
                ),
          )
          as _i4.Future<_i2.Result<List<_i5.NotificationSettings>>>);

  @override
  _i4.Future<_i2.Result<bool>> hasEnabledNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#hasEnabledNotifications, []),
            returnValue: _i4.Future<_i2.Result<bool>>.value(
              _FakeResult_0<bool>(
                this,
                Invocation.method(#hasEnabledNotifications, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<int>> getNotificationCount() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationCount, []),
            returnValue: _i4.Future<_i2.Result<int>>.value(
              _FakeResult_0<int>(
                this,
                Invocation.method(#getNotificationCount, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<int>>);

  @override
  _i4.Future<_i2.Result<int>> getEnabledNotificationCount() =>
      (super.noSuchMethod(
            Invocation.method(#getEnabledNotificationCount, []),
            returnValue: _i4.Future<_i2.Result<int>>.value(
              _FakeResult_0<int>(
                this,
                Invocation.method(#getEnabledNotificationCount, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<int>>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i6.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<bool>> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<_i2.Result<bool>>.value(
              _FakeResult_0<bool>(this, Invocation.method(#initialize, [])),
            ),
          )
          as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<bool>> requestPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermissions, []),
            returnValue: _i4.Future<_i2.Result<bool>>.value(
              _FakeResult_0<bool>(
                this,
                Invocation.method(#requestPermissions, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<void>> scheduleNotification(
    _i5.NotificationSettings? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleNotification, [settings]),
            returnValue: _i4.Future<_i2.Result<void>>.value(
              _FakeResult_0<void>(
                this,
                Invocation.method(#scheduleNotification, [settings]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<void>> cancelNotification(String? settingsId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelNotification, [settingsId]),
            returnValue: _i4.Future<_i2.Result<void>>.value(
              _FakeResult_0<void>(
                this,
                Invocation.method(#cancelNotification, [settingsId]),
              ),
            ),
          )
          as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<void>> cancelAllNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAllNotifications, []),
            returnValue: _i4.Future<_i2.Result<void>>.value(
              _FakeResult_0<void>(
                this,
                Invocation.method(#cancelAllNotifications, []),
              ),
            ),
          )
          as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<void>> scheduleImmediateNotification(
    String? title,
    String? body, {
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #scheduleImmediateNotification,
              [title, body],
              {#payload: payload},
            ),
            returnValue: _i4.Future<_i2.Result<void>>.value(
              _FakeResult_0<void>(
                this,
                Invocation.method(
                  #scheduleImmediateNotification,
                  [title, body],
                  {#payload: payload},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<List<_i7.PendingNotificationRequest>> getPendingNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingNotifications, []),
            returnValue: _i4.Future<List<_i7.PendingNotificationRequest>>.value(
              <_i7.PendingNotificationRequest>[],
            ),
          )
          as _i4.Future<List<_i7.PendingNotificationRequest>>);
}
